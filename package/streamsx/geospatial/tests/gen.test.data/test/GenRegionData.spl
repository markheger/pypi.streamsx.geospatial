namespace test;

use com.ibm.streams.geospatial::RegionMatchTypes;

public composite GenRegionData (output DeviceEvents, RegionData) {

	type
	
		DeviceEvent = tuple <
			rstring id,
			float64 latitude,
			float64 longitude,
			timestamp timeStamp,
			rstring matchEventType,
			rstring regionName
		>;

	graph

		// generate testdata 
		(stream<DeviceEvent> DeviceEvents; stream<RegionMatchTypes.RegionInfo> RegionData) as Tester = Custom()
		{ 
			logic
			onProcess : 
			{
				// add region
				mutable RegionMatchTypes.RegionInfo reg = {}; 
				reg.id = "reg-01";
				reg.removeRegion = false;
				reg.notifyOnEntry = true;
				reg.notifyOnExit = true;
				reg.notifyOnHangout = false;
				reg.polygonAsWKT = "POLYGON((13.413140166512107 52.53577235025506,13.468071807137107 52.53577235025506,13.468071807137107 52.51279486997035,13.413140166512107 52.51279486997035,13.413140166512107 52.53577235025506))";
				reg.minimumDwellTime = 0l;
				reg.timeout = 0l;
				submit(reg, RegionData);
				block(1.0);

				// send device events
				mutable timestamp ts = createTimestamp(10000000l,0u);
				submit( { id="car1", latitude=52.524911766618274, longitude=13.382927764168357, timeStamp=ts , matchEventType="", regionName="" } , DeviceEvents);
				submit( { id="car1", latitude=52.524911766618274, longitude=13.435456145516014, timeStamp=ts, matchEventType="", regionName="" } , DeviceEvents);
				submit( { id="car1", latitude=52.52365844951769, longitude=13.499657500496482, timeStamp=ts, matchEventType="", regionName="" } , DeviceEvents);
				submit( { id="car1", latitude=52.524911766618274, longitude=13.382927764168357, timeStamp=ts, matchEventType="", regionName="" } , DeviceEvents);				
			}
		}
		
}

